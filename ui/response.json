{
    "models": [
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    __tablename__ = 'customer'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    credit_limit = Column(Integer)\n    balance = Column(Integer)\n    orders = relationship(\"Order\", back_populates=\"customer\")",
            "description": "Represents a customer entity that holds information about customers.",
            "name": "Customer"
        },
        {
            "classname": "Order",
            "code": "class Order(Base):\n    __tablename__ = 'order'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    customer_id = Column(ForeignKey('customer.id'))\n    date_shipped = Column(DateTime)\n    amount_total = Column(Integer)\n    notes = Column(String)\n    customer = relationship('Customer', back_populates='orders')\n    items = relationship('Item', back_populates='order')",
            "description": "Represents an order entity containing order-related information such as notes and total amount.",
            "name": "Order"
        },
        {
            "classname": "Item",
            "code": "class Item(Base):\n    __tablename__ = 'item'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    order_id = Column(ForeignKey('order.id'))\n    product_id = Column(ForeignKey('product.id'))\n    quantity = Column(Integer)\n    unit_price = Column(Integer)\n    amount = Column(Integer)\n    order = relationship('Order', back_populates='items')\n    product = relationship('Product', back_populates='items')",
            "description": "Represents an item in an order, associated with a product and an order.",
            "name": "Item"
        },
        {
            "classname": "Product",
            "code": "class Product(Base):\n    __tablename__ = 'product'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    unit_price = Column(Integer)\n    items = relationship('Item', back_populates='product')",
            "description": "Represents a product that can be ordered.",
            "name": "Product"
        },
        {
            "classname": "Category",
            "code": "class Category(Base):\n    __tablename__ = 'category'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    products = relationship('Product', back_populates='category')",
            "description": "Represents a category for products.",
            "name": "Category"
        },
        {
            "classname": "Supplier",
            "code": "class Supplier(Base):\n    __tablename__ = 'supplier'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    products = relationship('Product', back_populates='supplier')",
            "description": "Represents a supplier of products.",
            "name": "Supplier"
        },
        {
            "classname": "Warehouse",
            "code": "class Warehouse(Base):\n    __tablename__ = 'warehouse'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    location = Column(String)\n    stock_items = relationship('StockItem', back_populates='warehouse')",
            "description": "Represents a warehouse storing inventory.",
            "name": "Warehouse"
        },
        {
            "classname": "StockItem",
            "code": "class StockItem(Base):\n    __tablename__ = 'stock_item'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    product_id = Column(ForeignKey('product.id'))\n    warehouse_id = Column(ForeignKey('warehouse.id'))\n    quantity = Column(Integer)\n    warehouse = relationship('Warehouse', back_populates='stock_items')",
            "description": "Represents stock of a product in a warehouse.",
            "name": "StockItem"
        },
        {
            "classname": "Employee",
            "code": "class Employee(Base):\n    __tablename__ = 'employee'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    years_of_service = Column(Integer)\n    skill_summary = Column(Integer)",
            "description": "Represents an employee within the company.",
            "name": "Employee"
        },
        {
            "classname": "EmployeeSkill",
            "code": "class EmployeeSkill(Base):\n    __tablename__ = 'employee_skill'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    employee_id = Column(ForeignKey('employee.id'))\n    rating = Column(Integer)",
            "description": "Represents the skill and rating of an employee.",
            "name": "EmployeeSkill"
        },
        {
            "classname": "Branch",
            "code": "class Branch(Base):\n    __tablename__ = 'branch'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    location = Column(String)",
            "description": "Represents a company branch location.",
            "name": "Branch"
        },
        {
            "classname": "BranchManager",
            "code": "class BranchManager(Base):\n    __tablename__ = 'branch_manager'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    branch_id = Column(ForeignKey('branch.id'))\n    employee_id = Column(ForeignKey('employee.id'))",
            "description": "Represents a manager for a branch of the company.",
            "name": "BranchManager"
        }
    ],
    "rules": [
        {
            "name": "Customer Balance Constraint",
            "description": "The Customer's balance is less than the credit limit",
            "use_case": "Check Credit",
            "entity": "Customer",
            "code": "Rule.constraint(validate=Customer,\n                as_condition=lambda row: row.balance <= row.credit_limit,\n                error_msg=\"Customer's balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")"
        },
        {
            "name": "Customer Balance Sum",
            "description": "The Customer's balance is the sum of the Order amount_total where date_shipped is null.",
            "use_case": "Check Credit",
            "entity": "Customer",
            "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)"
        },
        {
            "name": "Order Amount Total Sum",
            "description": "The Order's amount_total is the sum of the Item amount.",
            "use_case": "Check Credit",
            "entity": "Order",
            "code": "Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)"
        },
        {
            "name": "Item Amount Formula",
            "description": "The Item amount is the quantity * unit_price.",
            "use_case": "Check Credit",
            "entity": "Item",
            "code": "Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)"
        },
        {
            "name": "Item Unit Price Copy",
            "description": "The Item unit_price is copied from the Product unit_price.",
            "use_case": "Check Credit",
            "entity": "Item",
            "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)"
        }
    ],
    "test_data": "# Test data for Customer\ncustomer1 = Customer(name=\"Alice\", credit_limit=1000, balance=300)\ncustomer2 = Customer(name=\"Bob\", credit_limit=1500, balance=700)\ncustomer3 = Customer(name=\"Charlie\", credit_limit=2000, balance=1000)\ncustomer4 = Customer(name=\"David\", credit_limit=2500, balance=0)\n\n# Test data for Product\nproduct1 = Product(name=\"Laptop\", unit_price=1200)\nproduct2 = Product(name=\"Monitor\", unit_price=300)\nproduct3 = Product(name=\"Mouse\", unit_price=50)\nproduct4 = Product(name=\"Keyboard\", unit_price=70)\n\n# Test data for Order\norder1 = Order(customer_id=1, date_shipped=None, amount_total=0, notes=\"First order\")\norder2 = Order(customer_id=2, date_shipped=date(2023, 5, 10), amount_total=0, notes=\"Second order\")\norder3 = Order(customer_id=3, date_shipped=None, amount_total=0, notes=\"Third order\")\norder4 = Order(customer_id=4, date_shipped=date(2023, 8, 15), amount_total=0, notes=\"Fourth order\")\n\n# Test data for Item\nitem1 = Item(order_id=1, product_id=1, quantity=1, unit_price=1200, amount=1200)\nitem2 = Item(order_id=2, product_id=2, quantity=2, unit_price=300, amount=600)\nitem3 = Item(order_id=3, product_id=3, quantity=5, unit_price=50, amount=250)\nitem4 = Item(order_id=4, product_id=4, quantity=7, unit_price=70, amount=490)",
    "test_data_rows": [
        {
            "test_data_row_variable": "customer1",
            "code": "customer1 = Customer(name=\"Alice\", credit_limit=1000, balance=300)"
        },
        {
            "test_data_row_variable": "customer2",
            "code": "customer2 = Customer(name=\"Bob\", credit_limit=1500, balance=700)"
        },
        {
            "test_data_row_variable": "customer3",
            "code": "customer3 = Customer(name=\"Charlie\", credit_limit=2000, balance=1000)"
        },
        {
            "test_data_row_variable": "customer4",
            "code": "customer4 = Customer(name=\"David\", credit_limit=2500, balance=0)"
        },
        {
            "test_data_row_variable": "product1",
            "code": "product1 = Product(name=\"Laptop\", unit_price=1200)"
        },
        {
            "test_data_row_variable": "product2",
            "code": "product2 = Product(name=\"Monitor\", unit_price=300)"
        },
        {
            "test_data_row_variable": "product3",
            "code": "product3 = Product(name=\"Mouse\", unit_price=50)"
        },
        {
            "test_data_row_variable": "product4",
            "code": "product4 = Product(name=\"Keyboard\", unit_price=70)"
        },
        {
            "test_data_row_variable": "order1",
            "code": "order1 = Order(customer_id=1, date_shipped=None, amount_total=0, notes=\"First order\")"
        },
        {
            "test_data_row_variable": "order2",
            "code": "order2 = Order(customer_id=2, date_shipped=date(2023, 5, 10), amount_total=0, notes=\"Second order\")"
        },
        {
            "test_data_row_variable": "order3",
            "code": "order3 = Order(customer_id=3, date_shipped=None, amount_total=0, notes=\"Third order\")"
        },
        {
            "test_data_row_variable": "order4",
            "code": "order4 = Order(customer_id=4, date_shipped=date(2023, 8, 15), amount_total=0, notes=\"Fourth order\")"
        },
        {
            "test_data_row_variable": "item1",
            "code": "item1 = Item(order_id=1, product_id=1, quantity=1, unit_price=1200, amount=1200)"
        },
        {
            "test_data_row_variable": "item2",
            "code": "item2 = Item(order_id=2, product_id=2, quantity=2, unit_price=300, amount=600)"
        },
        {
            "test_data_row_variable": "item3",
            "code": "item3 = Item(order_id=3, product_id=3, quantity=5, unit_price=50, amount=250)"
        },
        {
            "test_data_row_variable": "item4",
            "code": "item4 = Item(order_id=4, product_id=4, quantity=7, unit_price=70, amount=490)"
        }
    ],
    "test_data_sqlite": "INSERT INTO customer (name, credit_limit, balance) VALUES (\"Alice\", 1000, 300);\nINSERT INTO customer (name, credit_limit, balance) VALUES (\"Bob\", 1500, 700);\nINSERT INTO customer (name, credit_limit, balance) VALUES (\"Charlie\", 2000, 1000);\nINSERT INTO customer (name, credit_limit, balance) VALUES (\"David\", 2500, 0);\n\nINSERT INTO product (name, unit_price) VALUES (\"Laptop\", 1200);\nINSERT INTO product (name, unit_price) VALUES (\"Monitor\", 300);\nINSERT INTO product (name, unit_price) VALUES (\"Mouse\", 50);\nINSERT INTO product (name, unit_price) VALUES (\"Keyboard\", 70);\n\nINSERT INTO order (customer_id, date_shipped, amount_total, notes) VALUES (1, NULL, 0, \"First order\");\nINSERT INTO order (customer_id, date_shipped, amount_total, notes) VALUES (2, '2023-05-10', 0, \"Second order\");\nINSERT INTO order (customer_id, date_shipped, amount_total, notes) VALUES (3, NULL, 0, \"Third order\");\nINSERT INTO order (customer_id, date_shipped, amount_total, notes) VALUES (4, '2023-08-15', 0, \"Fourth order\");\n\nINSERT INTO item (order_id, product_id, quantity, unit_price, amount) VALUES (1, 1, 1, 1200, 1200);\nINSERT INTO item (order_id, product_id, quantity, unit_price, amount) VALUES (2, 2, 2, 300, 600);\nINSERT INTO item (order_id, product_id, quantity, unit_price, amount) VALUES (3, 3, 5, 50, 250);\nINSERT INTO item (order_id, product_id, quantity, unit_price, amount) VALUES (4, 4, 7, 70, 490);",
    "name": "ECommerceSystem"
}